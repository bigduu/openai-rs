---
description: 
globs: 
alwaysApply: false
---
# Development Guidelines

## Core Principles
1. Stream-First Design: All processing is stream-based for real-time handling
2. Plugin Architecture: Use trait implementations for extensibility
3. Clean Architecture: Maintain clear separation between layers
4. Async/Await: All operations should be async-compatible

## Key Patterns

### Processor Implementation
```rust
#[async_trait::async_trait]
pub trait Processor: Send + Sync {
    async fn process(
        &self,
        event: &mut InternalStreamEvent,
        output_queue: &mut VecDeque<InternalStreamEvent>
    ) -> anyhow::Result<()>;
}
```

### Token Provider Implementation
```rust
#[async_trait::async_trait]
pub trait TokenProvider: Send + Sync {
    async fn get_token(&self) -> anyhow::Result<String>;
}
```

## Dependencies
- Async Runtime: Tokio with full features
- HTTP Client: Reqwest with JSON and streaming support
- Serialization: Serde for JSON handling
- Error Handling: Anyhow for error propagation
- Web Framework: Actix-web
- Logging: Tracing with subscriber support

## Testing Guidelines
- Unit test all processor implementations
- Mock external services in tests
- Use tokio test macros for async tests
- Ensure proper error handling coverage
