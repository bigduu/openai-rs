use serde::{Deserialize, Serialize};

/// Represents a tool call requested by the model.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct ToolCall {
    /// The ID of the tool call.
    pub id: String,
    /// The type of the tool. Currently, only `function` is supported.
    pub r#type: String, // Should be "function"
    /// The function that the model wants to call.
    pub function: FunctionCall,
}

/// Represents the function details within a tool call.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct FunctionCall {
    /// The name of the function to call.
    pub name: String,
    /// The arguments to call the function with, as generated by the model in JSON format.
    pub arguments: String, // JSON string
}

/// Represents a tool definition provided by the user.
#[derive(Debug, Clone, Serialize, PartialEq)]
pub struct Tool {
    /// The type of the tool. Currently, only `function` is supported.
    pub r#type: String, // Should be "function"
    /// The function definition.
    pub function: FunctionDefinition,
}

/// Represents the definition of a function tool.
#[derive(Debug, Clone, Serialize, PartialEq)]
pub struct FunctionDefinition {
    /// A description of what the function does.
    pub description: Option<String>,
    /// The name of the function to be called.
    pub name: String,
    /// The parameters the functions accepts, described as a JSON Schema object.
    pub parameters: serde_json::Value, // JSON Schema object
}

/// Controls which (if any) function is called by the model.
#[derive(Debug, Clone, Serialize, PartialEq)]
#[serde(untagged)]
pub enum ToolChoice {
    /// The model will not call a function and instead generates a message.
    #[serde(rename = "none")]
    None,
    /// The model can pick between generating a message or calling a function.
    #[serde(rename = "auto")]
    Auto,
    /// The model must call one or more functions.
    #[serde(rename = "required")]
    Required,
    /// Forces the model to call the specified function.
    Function {
        /// The type of the tool. Currently, only `function` is supported.
        #[serde(rename = "type")]
        r#type: String, // Should always be "function"
        /// The name of the function to call.
        function: FunctionName,
    },
}

/// Helper struct for specifying a function name within ToolChoice.
#[derive(Debug, Clone, Serialize, PartialEq)]
pub struct FunctionName {
    pub name: String,
}
