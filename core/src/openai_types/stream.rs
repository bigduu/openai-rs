use super::common::{CompletionUsage, LogProbs};
use serde::{Deserialize, Serialize};

/// Represents a streaming event that can be either a chunk of data or a done signal.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum StreamEvent {
    /// A chunk of data from the stream
    Chunk(OpenAiStreamChunk),
    /// A done signal indicating the end of the stream
    Done,
}

/// Represents a single chunk received in a streaming chat completion response.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct OpenAiStreamChunk {
    /// A unique identifier for the chat completion chunk.
    pub id: String,
    /// A list of chat completion choices.
    pub choices: Vec<StreamChoice>,
    /// The Unix timestamp of when the chat completion chunk was created.
    pub created: u64,
    /// The model to generate the completion.
    pub model: String,
    /// The object type.
    pub object: String, // "chat.completion.chunk"
    /// This fingerprint represents the backend configuration.
    pub system_fingerprint: Option<String>,
    /// An optional field that appears only in the very last chunk of the stream.
    pub usage: Option<CompletionUsage>,
}

/// Represents a choice within a stream chunk.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct StreamChoice {
    /// A chat completion delta generated by streamed model responses.
    pub delta: StreamDelta,
    /// The reason the model stopped generating tokens.
    pub finish_reason: Option<String>,
    /// The index of the choice in the list of choices.
    pub index: u32,
    /// Log probability information for the choice.
    pub logprobs: Option<LogProbs>,
}

/// Represents the delta (change) in content for a stream choice.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct StreamDelta {
    /// The contents of the chunk message.
    pub content: Option<String>,
    /// The tool calls generated by the model.
    #[serde(default)]
    pub tool_calls: Option<Vec<StreamToolCall>>,
    /// The role of the author of this message.
    pub role: Option<String>,
}

/// Represents a tool call within a stream delta.
#[derive(Debug, Clone, Deserialize, Serialize, PartialEq)]
pub struct StreamToolCall {
    pub index: u32,
    /// The ID of the tool call.
    pub id: Option<String>,
    /// The type of the tool.
    pub r#type: Option<String>,
    /// The function that the model wants to call.
    pub function: Option<StreamFunctionCall>,
}

/// Represents the function details within a streamed tool call delta.
#[derive(Debug, Clone, Deserialize, Serialize, PartialEq)]
pub struct StreamFunctionCall {
    /// The name of the function to call.
    pub name: Option<String>,
    /// The arguments to call the function with.
    pub arguments: Option<String>,
}
