use crate::event::InternalStreamEvent;
use anyhow::Result;
use async_trait::async_trait;
use std::collections::VecDeque;

/// Defines the contract for a processor in the stream processing chain.
///
/// Processors are responsible for inspecting, modifying, filtering, or generating
/// `InternalStreamEvent`s as they flow through the pipeline. They can perform
/// tasks like content filtering, data enrichment (e.g., RAG), formatting,
/// or triggering side effects based on the event content.
///
/// Processors operate asynchronously, allowing them to perform I/O operations
/// (like calling external APIs or databases) without blocking the entire stream.
#[async_trait]
pub trait Processor: Send + Sync {
    /// Processes a single incoming event.
    ///
    /// # Arguments
    ///
    /// * `event`: A mutable reference to the `InternalStreamEvent` currently being processed.
    ///   The processor can modify this event in place.
    /// * `output_queue`: A mutable reference to a `VecDeque` where the processor can
    ///   push zero or more new `InternalStreamEvent`s. These events will be processed
    ///   by subsequent stages in the pipeline *after* the current event (if it's not dropped).
    ///   Events pushed here are typically generated by the processor (e.g., results from
    ///   an external tool call or fetched data).
    ///
    /// # Returns
    ///
    /// * `Ok(())`: If the processing was successful.
    /// * `Err(anyhow::Error)`: If an error occurred during processing. This error might
    ///   halt the processing of the current request depending on the pipeline's error handling strategy.
    ///
    /// # Behavior Notes
    ///
    /// *   **Modification:** Processors can directly modify the `event` argument.
    /// *   **Insertion:** Processors can add new events to the `output_queue` to be processed later.
    /// *   **Deletion/Filtering:** A processor can effectively "delete" an event by not modifying it
    ///     and not adding anything to the output queue, relying on a later stage or the pipeline
    ///     manager to handle empty/noop events if necessary, or by returning a specific signal/error
    ///     if the design requires explicit filtering signals. (The current design doesn't explicitly
    ///     specify deletion, but modification to an empty/marker event is one way).
    /// *   **Asynchronicity:** The `async fn` allows awaiting external operations.
    async fn process(
        &self,
        event: &mut InternalStreamEvent,
        output_queue: &mut VecDeque<InternalStreamEvent>,
    ) -> Result<()>;
}
